;; Analyzed by ClojureScript 1.8.51
{:use-macros {have taoensso.encore, compile-if taoensso.encore, have? taoensso.encore}, :excludes #{}, :name taoensso.timbre, :imports nil, :requires {str clojure.string, clojure.string clojure.string, enc taoensso.encore, taoensso.encore taoensso.encore, core-appenders taoensso.timbre.appenders.core, taoensso.timbre.appenders.core taoensso.timbre.appenders.core}, :uses {}, :defs {get-rate-limiter {:name taoensso.timbre/get-rate-limiter, :file "resources/public/js/out/taoensso/timbre.cljs", :line 273, :column 1, :end-line 273, :end-column 41, :private true, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 273, :column 25, :end-line 273, :end-column 41, :private true}}, logging-enabled? {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 691, :column 7, :end-line 691, :end-column 23, :arglists (quote ([level compile-time-ns]))}, :name taoensso.timbre/logging-enabled?, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 23, :method-params ([level compile-time-ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 691, :end-line 691, :max-fixed-arity 2, :fn-var true, :arglists (quote ([level compile-time-ns]))}, valid-level {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 154, :column 16, :end-line 154, :end-column 27, :private true}, :private true, :name taoensso.timbre/valid-level, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 27, :method-params ([level]), :protocol-impl nil, :arglists-meta (), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists nil}, merge-config! {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 141, :column 7, :end-line 141, :end-column 20, :arglists (quote ([m]))}, :name taoensso.timbre/merge-config!, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, scored-levels {:name taoensso.timbre/scored-levels, :file "resources/public/js/out/taoensso/timbre.cljs", :line 152, :column 1, :end-line 152, :end-column 29, :private true, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 152, :column 16, :end-line 152, :end-column 29, :private true}}, log? {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 301, :column 7, :end-line 301, :end-column 11, :arglists (quote ([level] [level ?ns-str] [level ?ns-str config])), :doc "Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([level] [level ?ns-str] [level ?ns-str config]), :arglists ([level] [level ?ns-str] [level ?ns-str config]), :arglists-meta (nil nil nil)}}, :name taoensso.timbre/log?, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([level] [level ?ns-str] [level ?ns-str config]), :arglists ([level] [level ?ns-str] [level ?ns-str config]), :arglists-meta (nil nil nil)}, :method-params ([level] [level ?ns-str] [level ?ns-str config]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 3, :fn-var true, :arglists ([level] [level ?ns-str] [level ?ns-str config]), :doc "Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config"}, str-join {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 242, :column 10, :end-line 242, :end-column 18, :private true, :arglists (quote ([xs]))}, :private true, :name taoensso.timbre/str-join, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 18, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xs]))}, *config* {:name taoensso.timbre/*config*, :file "resources/public/js/out/taoensso/timbre.cljs", :line 131, :column 1, :end-line 131, :end-column 33, :dynamic true, :doc "See `example-config` for info.", :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 131, :column 25, :end-line 131, :end-column 33, :dynamic true, :doc "See `example-config` for info."}}, *context* {:name taoensso.timbre/*context*, :file "resources/public/js/out/taoensso/timbre.cljs", :line 295, :column 1, :end-line 295, :end-column 25, :dynamic true, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 295, :column 16, :end-line 295, :end-column 25, :dynamic true}, :doc "General-purpose dynamic logging context. Context will be included in appender\n  data map at logging time."}, -log! {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 358, :column 7, :end-line 358, :end-column 12, :arglists (quote ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data])), :doc "Core low-level log fn. Implementation detail!"}, :name taoensso.timbre/-log!, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 12, :method-params ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 9, :fn-var true, :arglists (quote ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data])), :doc "Core low-level log fn. Implementation detail!"}, fline {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 492, :column 8, :end-line 492, :end-column 13, :private true, :arglists (quote ([and-form]))}, :private true, :name taoensso.timbre/fline, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 13, :method-params ([and-form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 492, :end-line 492, :max-fixed-arity 1, :fn-var true, :arglists (quote ([and-form]))}, console-appender {:name taoensso.timbre/console-appender, :file "resources/public/js/out/taoensso/timbre.cljs", :line 56, :column 8, :end-line 56, :end-column 29, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 56, :column 13, :end-line 56, :end-column 29}}, default-err {:name taoensso.timbre/default-err, :file "resources/public/js/out/taoensso/timbre.cljs", :line 52, :column 1, :end-line 52, :end-column 21, :declared true, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 52, :column 10, :end-line 52, :end-column 21, :declared true}}, example-config {:name taoensso.timbre/example-config, :file "resources/public/js/out/taoensso/timbre.cljs", :line 58, :column 1, :end-line 58, :end-column 20, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 58, :column 6, :end-line 58, :end-column 20}, :doc "Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :fn              ; (fn [data]) -> side effects, with keys described below\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String, or nil\n      :?file           ; String, or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n\n      :?err_           ; Delay - first-arg platform error, or nil\n      :vargs_          ; Delay - raw args vector\n      :hostname_       ; Delay - string (clj only)\n      :msg_            ; Delay - args string\n      :timestamp_      ; Delay - string\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n\n      :context         ; *context* value at log time (see `with-context`)\n      :profile-stats   ; From `profile` macro\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware returns\n    nil, NO dispatching will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`."}, level>= {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 161, :column 7, :end-line 161, :end-column 14, :arglists (quote ([x y]))}, :name taoensso.timbre/level>=, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 14, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, set-config! {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 140, :column 9, :end-line 140, :end-column 20, :arglists (quote ([m]))}, :name taoensso.timbre/set-config!, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, swap-config! {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 136, :column 7, :end-line 136, :end-column 19, :arglists (quote ([f & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}}, :name taoensso.timbre/swap-config!, :variadic true, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists ([f & args])}, console-?appender {:name taoensso.timbre/console-?appender, :file "resources/public/js/out/taoensso/timbre.cljs", :line 690, :column 8, :end-line 690, :end-column 30, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 690, :column 13, :end-line 690, :end-column 30}}, str-println {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 692, :column 7, :end-line 692, :end-column 18, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name taoensso.timbre/str-println, :variadic true, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 692, :end-line 692, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, default-data-hash-fn {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 258, :column 7, :end-line 258, :end-column 27, :arglists (quote ([data])), :doc "Used for rate limiters, some appenders (e.g. Carmine), etc.\n  Goal: (hash data-1) = (hash data-2) iff data-1 \"the same\" as data-2 for\n  rate-limiting purposes, etc."}, :name taoensso.timbre/default-data-hash-fn, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 27, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Used for rate limiters, some appenders (e.g. Carmine), etc.\n  Goal: (hash data-1) = (hash data-2) iff data-1 \"the same\" as data-2 for\n  rate-limiting purposes, etc."}, set-level! {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 143, :column 11, :end-line 143, :end-column 21, :arglists (quote ([level]))}, :name taoensso.timbre/set-level!, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 21, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level]))}, vargs->margs {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 335, :column 8, :end-line 335, :end-column 20, :private true, :arglists (quote ([vargs a0-err?])), :doc "Processes vargs to extract special a0s"}, :private true, :name taoensso.timbre/vargs->margs, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 20, :method-params ([vargs a0-err?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vargs a0-err?])), :doc "Processes vargs to extract special a0s"}, inherit-over {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 278, :column 8, :end-line 278, :end-column 20, :private true, :arglists (quote ([k appender config default]))}, :private true, :name taoensso.timbre/inherit-over, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 20, :method-params ([k appender config default]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 4, :fn-var true, :arglists (quote ([k appender config default]))}, default-output-fn {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 34, :column 7, :end-line 34, :end-column 24, :arglists (quote ([data] [{:keys [no-stacktrace? stacktrace-fonts], :as opts} data])), :doc "Default (fn [data]) -> string output fn.\n  You can modify default options with `(partial default-output-fn <opts-map>)`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [{:keys [no-stacktrace? stacktrace-fonts], :as opts} data]), :arglists ([data] [{:keys [no-stacktrace? stacktrace-fonts], :as opts} data]), :arglists-meta (nil nil)}}, :name taoensso.timbre/default-output-fn, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [{:keys [no-stacktrace? stacktrace-fonts], :as opts} data]), :arglists ([data] [{:keys [no-stacktrace? stacktrace-fonts], :as opts} data]), :arglists-meta (nil nil)}, :method-params ([data] [{:keys [no-stacktrace? stacktrace-fonts], :as opts} data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists ([data] [{:keys [no-stacktrace? stacktrace-fonts], :as opts} data]), :doc "Default (fn [data]) -> string output fn.\n  You can modify default options with `(partial default-output-fn <opts-map>)`."}, ->delay {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 239, :column 8, :end-line 239, :end-column 15, :private true, :arglists (quote ([x]))}, :private true, :name taoensso.timbre/->delay, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, default-out {:name taoensso.timbre/default-out, :file "resources/public/js/out/taoensso/timbre.cljs", :line 52, :column 1, :end-line 52, :end-column 33, :declared true, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 52, :column 22, :end-line 52, :end-column 33, :declared true}}, ns-filter {:name taoensso.timbre/ns-filter, :file "resources/public/js/out/taoensso/timbre.cljs", :line 210, :column 1, :end-line 210, :end-column 25, :private true, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 210, :column 16, :end-line 210, :end-column 25, :private true}, :doc "(fn [whitelist blacklist ns]) -> ?unfiltered-ns"}, println-appender {:name taoensso.timbre/println-appender, :file "resources/public/js/out/taoensso/timbre.cljs", :line 55, :column 8, :end-line 55, :end-column 29, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 55, :column 13, :end-line 55, :end-column 29}}, valid-levels {:name taoensso.timbre/valid-levels, :file "resources/public/js/out/taoensso/timbre.cljs", :line 153, :column 1, :end-line 153, :end-column 28, :private true, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 153, :column 16, :end-line 153, :end-column 28, :private true}}, ordered-levels {:name taoensso.timbre/ordered-levels, :file "resources/public/js/out/taoensso/timbre.cljs", :line 151, :column 1, :end-line 151, :end-column 20, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 151, :column 6, :end-line 151, :end-column 20}}, get-hostname {:name taoensso.timbre/get-hostname, :file "resources/public/js/out/taoensso/timbre.cljs", :line 237, :column 1, :end-line 237, :end-column 22, :declared true, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 237, :column 10, :end-line 237, :end-column 22, :declared true}}, stacktrace {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 671, :column 7, :end-line 671, :end-column 17, :arglists (quote ([err & [{:keys [stacktrace-fonts], :as opts}]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(err [{:keys [stacktrace-fonts], :as opts}])], :arglists ([err & [{:keys [stacktrace-fonts], :as opts}]]), :arglists-meta (nil)}}, :name taoensso.timbre/stacktrace, :variadic true, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(err [{:keys [stacktrace-fonts], :as opts}])], :arglists ([err & [{:keys [stacktrace-fonts], :as opts}]]), :arglists-meta (nil)}, :method-params [(err [{:keys [stacktrace-fonts], :as opts}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 671, :end-line 671, :max-fixed-arity 1, :fn-var true, :arglists ([err & [{:keys [stacktrace-fonts], :as opts}]])}, inherit-into {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 284, :column 8, :end-line 284, :end-column 20, :private true, :arglists (quote ([k appender config default]))}, :private true, :name taoensso.timbre/inherit-into, :variadic false, :file "resources/public/js/out/taoensso/timbre.cljs", :end-column 20, :method-params ([k appender config default]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 4, :fn-var true, :arglists (quote ([k appender config default]))}, compile-ns-filters {:name taoensso.timbre/compile-ns-filters, :file "resources/public/js/out/taoensso/timbre.cljs", :line 180, :column 1, :end-line 180, :end-column 34, :private true, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/resources/public/js/out/taoensso/timbre.cljs", :line 180, :column 16, :end-line 180, :end-column 34, :private true}, :doc "(fn [whitelist blacklist]) -> (fn [ns]) -> ?unfiltered-ns"}}, :require-macros {timbre-macros taoensso.timbre, taoensso.timbre taoensso.timbre, enc taoensso.encore, taoensso.encore taoensso.encore}, :cljs.analyzer/constants {:seen #{:ns-whitelist :inherit :report :fn :?hash-arg :ns-blacklist :instant :rate-limit :else :config :vargs :data-hash-fn :msg_ :warn :trace :?file :msg-fn :debug :hostname_ :error-level? :appender :appender-id :?ns-str :enabled? :middleware :fatal :level :output-fn :line :?err :vargs_ :info :stacktrace-fonts :no-stacktrace? :?hash-arg_ :timestamp_ :context :?line :min-level :error :console :?err_ :auto :timbre/hash :async? :appenders}, :order [:no-stacktrace? :stacktrace-fonts :level :?err_ :vargs_ :msg_ :?ns-str :hostname_ :timestamp_ :?line :ns-whitelist :ns-blacklist :middleware :output-fn :appenders :debug :console :trace :info :warn :error :fatal :report :else :?hash-arg :inherit :timbre/hash :?err :vargs :auto :instant :config :?file :error-level? :?hash-arg_ :context :enabled? :min-level :rate-limit :data-hash-fn :fn :async? :appender-id :appender :msg-fn :line]}, :doc "Simple, flexible logging for Clojure/Script. No XML."}