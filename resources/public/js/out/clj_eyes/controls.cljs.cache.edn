;; Analyzed by ClojureScript 1.8.51
{:use-macros {warnf taoensso.timbre, go cljs.core.async.macros, go-loop cljs.core.async.macros, debugf taoensso.timbre, tracef taoensso.timbre, infof taoensso.timbre, errorf taoensso.timbre}, :excludes #{}, :name clj-eyes.controls, :imports nil, :requires {sente taoensso.sente, timbre taoensso.timbre, img clj-eyes.img-frame, bind clj-eyes.bind-funcs, clj-eyes.param-handling clj-eyes.param-handling, clj-eyes.handlers clj-eyes.handlers, async cljs.core.async, clj-eyes.bind-funcs clj-eyes.bind-funcs, jq jayq.core, cljs.core.async cljs.core.async, jayq.core jayq.core, params clj-eyes.param-handling, taoensso.sente taoensso.sente, encore taoensso.encore, clj-eyes.socket clj-eyes.socket, soc clj-eyes.socket, taoensso.timbre taoensso.timbre, taoensso.encore taoensso.encore, clj-eyes.img-frame clj-eyes.img-frame, handle clj-eyes.handlers}, :uses {<! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {-event-msg-handler {:name clj-eyes.controls/-event-msg-handler, :file "src/clj_eyes/controls.cljs", :line 18, :column 1, :end-line 18, :end-column 29, :doc "Multimethod to handle Sente `event-msg`s", :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/src/clj_eyes/controls.cljs", :line 18, :column 11, :end-line 18, :end-column 29, :doc "Multimethod to handle Sente `event-msg`s"}}, event-msg-handler {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/src/clj_eyes/controls.cljs", :line 24, :column 7, :end-line 24, :end-column 24, :arglists (quote ([{:as ev-msg, :keys [id ?data event]}])), :doc "Wraps `-event-msg-handler` with logging, error catching, etc."}, :name clj-eyes.controls/event-msg-handler, :variadic false, :file "src/clj_eyes/controls.cljs", :end-column 24, :method-params ([p__38011]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:as ev-msg, :keys [id ?data event]}])), :doc "Wraps `-event-msg-handler` with logging, error catching, etc."}, router_ {:name clj-eyes.controls/router_, :file "src/clj_eyes/controls.cljs", :line 61, :column 1, :end-line 61, :end-column 17, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/src/clj_eyes/controls.cljs", :line 61, :column 10, :end-line 61, :end-column 17}}, stop-router! {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/src/clj_eyes/controls.cljs", :line 62, :column 8, :end-line 62, :end-column 20, :arglists (quote ([]))}, :name clj-eyes.controls/stop-router!, :variadic false, :file "src/clj_eyes/controls.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start-router! {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/src/clj_eyes/controls.cljs", :line 63, :column 7, :end-line 63, :end-column 20, :arglists (quote ([]))}, :name clj-eyes.controls/start-router!, :variadic false, :file "src/clj_eyes/controls.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init {:protocol-inline nil, :meta {:file "/Users/collinbell/Rouge/eyes/clj-eyes/src/clj_eyes/controls.cljs", :line 69, :column 7, :end-line 69, :end-column 11, :arglists (quote ([]))}, :name clj-eyes.controls/init, :variadic false, :file "src/clj_eyes/controls.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {asyncm cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros, encore taoensso.encore, taoensso.encore taoensso.encore, timbre taoensso.timbre, taoensso.timbre taoensso.timbre}, :cljs.analyzer/constants {:seen #{:first-open? :chsk/recv :default :pipeline/reload-img :chsk/state :event :id :?data :frame-id :chsk/ws-error :pipeline/load-transformation-frame :hierarchy :chsk/handshake :html}, :order [:hierarchy :id :default :?data :event :chsk/state :first-open? :chsk/recv :pipeline/reload-img :chsk/ws-error :chsk/handshake :pipeline/load-transformation-frame :html :frame-id]}, :doc nil}